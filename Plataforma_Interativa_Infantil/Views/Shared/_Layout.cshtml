@using System.Security.Claims
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    var user = HttpContextAccessor.HttpContext?.User;
    var isAuthenticated = user?.Identity?.IsAuthenticated ?? false;
    var userName = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? "";
    var userInitial = string.IsNullOrEmpty(userName) ? "" : userName.Substring(0, 1).ToUpper();
    var userId = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    var userRole = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value?.ToLower() ?? "home";
    string dashboardAction = userRole switch
    {
        "pai" => "Index",
        "professor" => "Index",
        "crianca" => "Index",
        _ => "Index"
    };
    string dashboardController = userRole switch
    {
        "pai" => "Pai",
        "professor" => "Professor",
        "crianca" => "Crianca",
        _ => "Home"
    };
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
 <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%237b61ff' class='bi bi-mortarboard-fill' viewBox='0 0 16 16'><path d='M8.211 2.047a.5.5 0 0 0-.422 0l-7.5 3.5a.5.5 0 0 0 .025.917l7.5 3a.5.5 0 0 0 .372 0L15.5 6.464a.5.5 0 0 0 .025-.917l-7.5-3.5Z'/><path fill-rule='evenodd' d='M4.176 9.032a.5.5 0 0 0-.656.327l-.5 1.7a.5.5 0 0 0 .294.605l4.5 1.8a.5.5 0 0 0 .372 0l4.5-1.8a.5.5 0 0 0 .294-.605l-.5-1.7a.5.5 0 0 0-.656-.327L8 10.466 4.176 9.032Zm-.068 1.873.22-.748L8 11.123l3.672-1.464.22.748L8 12.46l-3.892-1.556Z'/></svg>" type="image/svg+xml">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <title>@ViewData["Title"] - CogniVerse</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" /> 
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    
    <svg id="svg-filters" aria-hidden="true" style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <filter id="filter-protanopia">
                <feColorMatrix in="SourceGraphic" type="matrix" values="0.567, 0.433, 0, 0, 0, 0.558, 0.442, 0, 0, 0, 0, 0.242, 0.758, 0, 0, 0, 0, 0, 1, 0" />
            </filter>
            <filter id="filter-deuteranopia">
                <feColorMatrix in="SourceGraphic" type="matrix" values="0.625, 0.375, 0, 0, 0, 0.7, 0.3, 0, 0, 0, 0, 0.3, 0.7, 0, 0, 0, 0, 0, 1, 0" />
            </filter>
            <filter id="filter-tritanopia">
                <feColorMatrix in="SourceGraphic" type="matrix" values="0.95, 0.05, 0, 0, 0, 0, 0.433, 0.567, 0, 0, 0, 0.475, 0.525, 0, 0, 0, 0, 0, 1, 0" />
            </filter>
            <filter id="filter-grayscale">
                <feColorMatrix in="SourceGraphic" type="matrix" values="0.2126, 0.7152, 0.0722, 0, 0, 0.2126, 0.7152, 0.0722, 0, 0, 0.2126, 0.7152, 0.0722, 0, 0, 0, 0, 0, 1, 0" />
            </filter>
        </defs>
    </svg>
    <header>
        <nav class="navbar">
            <div class="container"> 
                <a class="navbar-brand" href="@Url.Action(dashboardAction, dashboardController)">
                    <i class="bi bi-mortarboard-fill"></i>
                    <span>CogniVerse</span>
                </a>
               @if (isAuthenticated)
                {
                 <div class="navbar-user"> 
                        <span>Olá, <strong>@userName</strong>!</span>
                        
                     <div class="navbar-user-actions">
    <button id="accessibility-navbar-btn" class="btn btn-sm btn-profile-nav" type="button" aria-label="Abrir menu de acessibilidade. Atalho: Alt + A">
        <i class="bi bi-stars"></i> Acessibilidade
    </button>
    <button type="button" class="btn btn-sm btn-profile-nav" data-bs-toggle="modal" data-bs-target="#profileModal">
        <i class="bi bi-gear-fill"></i> Perfil
    </button>
    <button type="button" class="btn btn-sm btn-logout-nav" data-bs-toggle="modal" data-bs-target="#confirmLogoutModal">
        <i class="bi bi-box-arrow-right"></i> Sair
    </button>
</div>
                    </div>
                }
            </div>
        </nav>
    </header>

    <main role="main">
        @RenderBody()
    </main>

    @await Html.PartialAsync("_Footer")

    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100">
    </div>

    @if (isAuthenticated) 
    {
        @if (int.TryParse(userId, out int parsedUserId))
        {
            <div class="modal fade" id="confirmLogoutModal" tabindex="-1" aria-hidden="true">
                 <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Deseja realmente sair?</h5>
                             <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Você será redirecionado para a página inicial.
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                            <form asp-controller="Account" asp-action="Logout" method="post">
                                 @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-primary">Sair</button>
                            </form>
                     </div>
                    </div>
                </div>
            </div>
            
            @await Component.InvokeAsync("ProfileModal")
            
            <div class="modal fade" id="vincularModal" tabindex="-1" aria-labelledby="vincularModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <form action="@Url.Action("Vincular", "Pai")" method="post">
                            @Html.AntiForgeryToken()
                            <div class="modal-header">
                                <div class="modal-header-icon"><i class="bi bi-link-45deg"></i></div>
                                <h5 class="modal-title" id="vincularModalLabel">Vincular Criança/Aluno</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body text-center" style="padding-bottom: 0;">
                                <p>Insira o código de 6 dígitos fornecido pela criança.</p>
                            </div>
                            <div class="modal-body" style="text-align: left;">
                                <div class="mb-3">
                                    <label for="codigoVinculo" class="form-label">Código de Vínculo</label>
                                    <input type="text" id="codigoVinculo" name="codigoVinculo" class="form-control" placeholder="000000" maxlength="6" />
                                    <span name="codigoVinculo-validation" class="text-danger"></span>
                                </div>
                             </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                <button type="submit" class="btn btn-primary">Vincular</button>
                            </div>
                        </form>
                    </div>
                 </div>
            </div>
        }
    }
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
           document.addEventListener('DOMContentLoaded', function () {
            
            // --- LÓGICA DE TOAST (Notificação) ---
            var toastContainer = document.querySelector('.toast-container');
            function showToast(message, type) {
                if (!toastContainer) return;
                var toastId = 'toast-' + Date.now();
                var bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
                var toastHtml = `
                    <div id="${toastId}" class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                 ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                         </div>
                    </div>`;
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                var toastElement = document.getElementById(toastId);
                var toast = new bootstrap.Toast(toastElement, { delay: 5000 });
                toast.show();
                toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
            }

            // Verifica o TempData
            @if (TempData["ProfileSuccess"] != null)
            {
                @:showToast('@Html.Raw(TempData["ProfileSuccess"])', 'success');
            }
            @if (TempData["ProfileError"] != null)
            {
                @:showToast('@Html.Raw(TempData["ProfileError"])', 'danger');
            }
            @if (TempData["AccountDeleted"] != null)
            {
                @:showToast('@Html.Raw(TempData["AccountDeleted"])', 'success');
            }
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)

    <div id="reading-guide-bar" class="reading-guide-bar" style="display: none;"></div>

    <div id="accessibility-overlay" class="accessibility-overlay" style="display: none;"></div>

    <div id="accessibility-panel" class="accessibility-panel" style="display: none;">
        <div class="acc-panel-header">
            <div class="acc-header-title">
                <i class="bi bi-stars"></i>
                <div>
                    <h2>Acessibilidade</h2>
                    <p>Personalize sua experiência</p>
                </div>
            </div>
            <button id="acc-panel-close-btn" class="acc-panel-close-btn" aria-label="Fechar painel">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="acc-panel-content">
            
            <div class="acc-control-group">
                <div class="acc-control-header">
                    <label for="font-size-slider">Tamanho da Fonte</label>
                    <span id="font-size-value" class="acc-badge">16px</span>
                </div>
                <input type="range" id="font-size-slider" class="form-range acc-slider" min="14" max="24" step="1">
            </div>

            <div class="acc-control-group">
                <div class="acc-control-header">
                    <label for="line-height-slider">Espaçamento de Linha</label>
                    <span id="line-height-value" class="acc-badge">1.5</span>
                </div>
                <input type="range" id="line-height-slider" class="form-range acc-slider" min="1.2" max="2.5" step="0.1">
            </div>

            <div class="acc-grid">
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-highContrast">
                    <label class="form-check-label" for="acc-highContrast">
                        <i class="bi bi-eye-fill"></i> Alto Contraste
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-darkMode">
                    <label class="form-check-label" for="acc-darkMode">
                        <i class="bi bi-moon-fill"></i> Modo Escuro
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-textToSpeech">
                    <label class="form-check-label" for="acc-textToSpeech">
                        <i class="bi bi-volume-up-fill"></i> Leitura de Tela
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-highlightLinks">
                    <label class="form-check-label" for="acc-highlightLinks">
                        <i class="bi bi-link-45deg"></i> Destacar Links
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-largeCursor">
                    <label class="form-check-label" for="acc-largeCursor">
                        <i class="bi bi-mouse-fill"></i> Cursor Grande
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-readingGuide">
                    <label class="form-check-label" for="acc-readingGuide">
                        <i class="bi bi-book-fill"></i> Guia de Leitura
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-reduceAnimations">
                    <label class="form-check-label" for="acc-reduceAnimations">
                        <i class="bi bi-wind"></i> Reduzir Animações
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-dyslexiaFont">
                    <label class="form-check-label" for="acc-dyslexiaFont">
                        <i class="bi bi-fonts"></i> Fonte Dislexia
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-softColors">
                    <label class="form-check-label" for="acc-softColors">
                        <i class="bi bi-palette-fill"></i> Cores Suaves
                    </label>
                </div>
                <div class="form-check form-switch acc-switch-card">
                    <input class="form-check-input" type="checkbox" role="switch" id="acc-simplifiedMode">
                    <label class="form-check-label" for="acc-simplifiedMode">
                        <i class="bi bi-ui-checks"></i> Modo Simples
                    </label>
                </div>
            </div>

            <div class="acc-control-group">
                <label>Filtro de Cores (Daltonismo)</label>
                <div id="acc-color-filters" class="acc-filter-grid">
                    <button class="acc-filter-btn" data-filter="none">👁️ Normal</button>
                    <button class="acc-filter-btn" data-filter="protanopia">🔴 Protanopia</button>
                    <button class="acc-filter-btn" data-filter="deuteranopia">🟢 Deuteranopia</button>
                    <button class="acc-filter-btn" data-filter="tritanopia">🔵 Tritanopia</button>
                    <button class="acc-filter-btn" data-filter="grayscale">⚫ Tons de Cinza</button>
                </div>
            </div>

            <div class="acc-control-group">
                <button id="acc-reset-btn" class="acc-reset-btn">
                    <i class="bi bi-arrow-counterclockwise"></i> Restaurar Padrão
                </button>
            </div>
            
            <div class="acc-tip">
                ⌨️ <strong>Atalho:</strong> Pressione <strong>Alt + A</strong> para abrir/fechar este painel.
            </div>

        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            
            // --- 1. DEFINIÇÕES E ESTADO ---
            const root = document.documentElement;
            const body = document.body;
            
            // Elementos do painel
            // MODIFICADO: Procura o botão na navbar
            const fab = document.getElementById('accessibility-navbar-btn'); 
            const panel = document.getElementById('accessibility-panel');
            const overlay = document.getElementById('accessibility-overlay');
            const closeBtn = document.getElementById('acc-panel-close-btn');
            
            const fontSizeSlider = document.getElementById('font-size-slider');
            const fontSizeValue = document.getElementById('font-size-value');
            const lineHeightSlider = document.getElementById('line-height-slider');
            const lineHeightValue = document.getElementById('line-height-value');
            
            // Switches
            const switches = {
                highContrast: document.getElementById('acc-highContrast'),
                darkMode: document.getElementById('acc-darkMode'),
                textToSpeech: document.getElementById('acc-textToSpeech'),
                highlightLinks: document.getElementById('acc-highlightLinks'),
                largeCursor: document.getElementById('acc-largeCursor'),
                readingGuide: document.getElementById('acc-readingGuide'),
                reduceAnimations: document.getElementById('acc-reduceAnimations'),
                dyslexiaFont: document.getElementById('acc-dyslexiaFont'),
                softColors: document.getElementById('acc-softColors'),
                simplifiedMode: document.getElementById('acc-simplifiedMode')
            };
            
            // Filtros
            const filterButtons = document.querySelectorAll('.acc-filter-btn');
            const resetBtn = document.getElementById('acc-reset-btn');
            
            // Leitura
            const readingGuideBar = document.getElementById('reading-guide-bar');
            let tts = window.speechSynthesis;
            
            // Definições Padrão
            const defaultSettings = {
                fontSize: 16,
                highContrast: false,
                darkMode: false,
                textToSpeech: false,
                highlightLinks: false,
                lineSpacing: 1.5,
                largeCursor: false,
                readingGuide: false,
                reduceAnimations: false,
                dyslexiaFont: false,
                colorFilter: 'none',
                softColors: false,
                simplifiedMode: false,
            };

            let settings = JSON.parse(localStorage.getItem('edukids_accessibility')) || defaultSettings;

            // --- 2. FUNÇÕES PRINCIPAIS ---

            function saveSettings() {
                localStorage.setItem('edukids_accessibility', JSON.stringify(settings));
            }

            function updateSettings(key, value) {
                settings[key] = value;
                
                if (key === 'highContrast' && value === true) {
                    settings.darkMode = false;
                    settings.softColors = false;
                } else if (key === 'darkMode' && value === true) {
                    settings.highContrast = false;
                    settings.softColors = false;
                } else if (key === 'softColors' && value === true) {
                    settings.highContrast = false;
                    settings.darkMode = false;
                }

                saveSettings();
                applySettings();
                updateUI();
            }

            function applySettings() {
                root.style.setProperty('--font-size', `${settings.fontSize}px`);
                root.style.setProperty('--line-height', `${settings.lineSpacing}`);

                Object.keys(switches).forEach(key => {
                    const className = key.replace(/([A-Z])/g, '-$1').toLowerCase();
                    if (settings[key]) {
                        root.classList.add(className);
                    } else {
                        root.classList.remove(className);
                    }
                });
                
                if (settings.darkMode) { root.classList.add('dark'); } 
                else { root.classList.remove('dark'); }

                root.setAttribute('data-color-filter', settings.colorFilter);

                if (settings.readingGuide) {
                    readingGuideBar.style.display = 'block';
                } else {
                    readingGuideBar.style.display = 'none';
                }
                
                if (settings.textToSpeech === false) {
                    stopSpeaking();
                }
            }

            function updateUI() {
                fontSizeSlider.value = settings.fontSize;
                fontSizeValue.textContent = `${settings.fontSize}px`;
                lineHeightSlider.value = settings.lineSpacing;
                lineHeightValue.textContent = settings.lineSpacing.toFixed(1);

                Object.keys(switches).forEach(key => {
                    switches[key].checked = settings[key];
                });

                filterButtons.forEach(btn => {
                    if (btn.dataset.filter === settings.colorFilter) {
                        btn.classList.add('active');
                    } else {
                        btn.classList.remove('active');
                    }
                });
            }

            function resetSettings() {
                settings = { ...defaultSettings };
                saveSettings();
                applySettings();
                updateUI();
            }

            // --- 3. LÓGICA DO PAINEL E ATALHOS ---

            function openPanel() {
                panel.style.display = 'flex';
                overlay.style.display = 'block';
                setTimeout(() => {
                    panel.style.transform = 'translateX(0)';
                    overlay.style.opacity = '1';
                }, 10);
            }

            function closePanel() {
                panel.style.transform = 'translateX(100%)';
                overlay.style.opacity = '0';
                setTimeout(() => {
                    panel.style.display = 'none';
                    overlay.style.display = 'none';
                }, 300);
            }

            window.addEventListener('keydown', (e) => {
                if (e.altKey && (e.key === 'a' || e.key === 'A')) {
                    e.preventDefault();
                    if (panel.style.display === 'none') openPanel();
                    else closePanel();
                }
                if (e.key === 'Escape' && panel.style.display !== 'none') {
                    closePanel();
                }
            });

            // --- 4. LEITURA DE TELA E GUIA ---

            function speak(text) {
                if (!tts || !settings.textToSpeech || !text) return;
                stopSpeaking();
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'pt-BR';
                utterance.rate = 0.9;
                utterance.pitch = 1.1;
                tts.speak(utterance);
            }

            function stopSpeaking() {
                if (tts) tts.cancel();
            }

            document.addEventListener('click', (e) => {
                if (settings.textToSpeech) {
                    if (panel.contains(e.target) || (fab && fab.contains(e.target))) {
                        return;
                    }
                    let target = e.target;
                    while (target && target !== body) {
                        let text = (target.textContent || target.innerText || target.ariaLabel);
                        if (text && text.trim().length > 1) {
                            speak(text.trim());
                            return;
                        }
                        target = target.parentElement;
                    }
                }
            });

            document.addEventListener('mousemove', (e) => {
                if (settings.readingGuide) {
                    readingGuideBar.style.top = (e.clientY - (readingGuideBar.offsetHeight / 2)) + 'px';
                }
            });

            // --- 5. EVENT LISTENERS ---

            if(fab) fab.addEventListener('click', openPanel); // Verifica se o FAB existe
            closeBtn.addEventListener('click', closePanel);
            overlay.addEventListener('click', closePanel);

            fontSizeSlider.addEventListener('input', (e) => updateSettings('fontSize', parseInt(e.target.value)));
            lineHeightSlider.addEventListener('input', (e) => updateSettings('lineSpacing', parseFloat(e.target.value)));

            Object.keys(switches).forEach(key => {
                switches[key].addEventListener('change', (e) => updateSettings(key, e.target.checked));
            });

            filterButtons.forEach(btn => {
                btn.addEventListener('click', () => updateSettings('colorFilter', btn.dataset.filter));
            });
            
            resetBtn.addEventListener('click', resetSettings);
            
            // --- 6. INICIALIZAÇÃO ---
            
            applySettings();
            updateUI();
            
            panel.style.transform = 'translateX(100%)';
            overlay.style.opacity = '0';

        });
    </script>
    </body>
</html>